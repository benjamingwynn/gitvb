#!/usr/bin/env bash
set -e

GITVB_HOME="./.git/.gitvb-v0"
MAIN_BRANCH="${MAIN_BRANCH:-main}"

if [ "$(git branch --show-current)" != "$MAIN_BRANCH" ]; then
    echo "you are not on the main branch: $MAIN_BRANCH"
    exit 1
fi


if [ "$1" == "" ]; then
    echo "usage: gitvb-pick <branch>"
    exit 1
fi

pickBranch="$1"
newVbFilePath="$GITVB_HOME/$pickBranch.gitvb"

if [ -f "$newVbFilePath" ]; then
    echo "already picked $pickBranch"
    exit 2
fi

mkdir -p "$(dirname "$newVbFilePath")"

# we can only pick branches that are up to date
gitvb-is-pickable $pickBranch

# 1. record our current hash
currentHash=$(git rev-parse "origin/$MAIN_BRANCH")
echo "setting base as = $currentHash"
# 2. get each commit hash on the target branch
commitsToApply=$(git log --cherry $MAIN_BRANCH...$pickBranch --pretty=format:"%H" --reverse)
# 3. for each hash
    # - cherry-pick the hash
    # - record it on success

echo "base=$currentHash" > $newVbFilePath
printf "applied=" >> $newVbFilePath

if [ -z "$commitsToApply" ]; then
    echo 'this branch does not yet differ, applied anyway'
    exit 0
fi

while IFS= read -r line; do
    echo "applying $line"
    newCommitMessage="[gitvb:$pickBranch] $(git log -1 --format=%B $line)"
    echo "$newCommitMessage" > /tmp/gitvb-commit
    EDITOR="gitvb-commit-editor" git cherry-pick -e $line
    appliedCommitHash="$(git log -1 --format="%H")"
    echo "applied as $appliedCommitHash"
    echo "$appliedCommitHash" >> $newVbFilePath
done <<< "$commitsToApply"

echo ""
echo "succesfully picked $pickBranch"
echo ""
