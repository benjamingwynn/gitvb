#!/usr/bin/env bash
set -e

GITVB_HOME="./.git/.gitvb-v0"
MAIN_BRANCH="${MAIN_BRANCH:-main}"

if [ "$1" == "" ]; then
    echo "usage: gitvb-commit <branch>"
    exit 1
fi
commitBranch="$1"

if [ -z "$(git diff --staged)" ]; then
    echo "there are no staged changes. exiting."
    echo "stage changes with $ git add"
    exit 1
fi

if [ "$(git branch --show-current)" != "$MAIN_BRANCH" ]; then
    echo "you are not on the main branch: $MAIN_BRANCH"
    exit 1
fi

# REMOTE_COMMITS=$(git rev-list --count "origin/$MAIN_BRANCH" ^"$commitBranch")
# if [ "$REMOTE_COMMITS" -gt 0 ]; then
#   echo ""
#   echo "*** Branch '$BRANCH_NAME' look bad. ***"
#   echo ""
#   exit 1
# fi

vbFilePath="$GITVB_HOME/$commitBranch.gitvb"

if [ ! -f "$vbFilePath" ]; then
    echo "not picked branch $commitBranch, so cannot commit there"
    exit 2
fi

git commit -v
# then get previous/last commit id
addedCommitHash="$(git rev-parse "$MAIN_BRANCH")"
gitvb-wip commit
echo "1"
git checkout "$commitBranch"
echo "2"
git cherry-pick --ff "$addedCommitHash" 
echo "3"
git checkout "$MAIN_BRANCH"
echo "3b"
git reset --hard HEAD~1
echo "4"
gitvb-unpick "$commitBranch"
echo "5"
gitvb-pick "$commitBranch"
echo "6"
gitvb-wip-undo commit

# 0. bail if branch not picked
# 1. git commit
# 2. write the commit hash to the gitvb file
# 3. wip commit if any unstaged files changed
# 4. checkout to target branch
# 5. cherry pick commit id over
# 6. checkout back to master

echo
echo "succesfully commited to $commitBranch!"
echo "  you can upload your changes to the remote by running:"
echo "  $ gitvb-publish $commitBranch"
echo
