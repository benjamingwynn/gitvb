#!/usr/bin/env bash
set -e

GITVB_HOME="./.git/.gitvb-v0"
MAIN_BRANCH="${MAIN_BRANCH:-main}"
WIP_TOKEN=">>WIP<<"

if [ "$(git branch --show-current)" != "$MAIN_BRANCH" ]; then
    echo "you are not on the main branch: $MAIN_BRANCH"
    exit 1
fi

if [ ! -z "$(git diff --staged)" ]; then
    echo "you have staged changes."
    echo "  commit with $ gitvb-commit <branch>."
    echo ""
fi

echo "on branch $MAIN_BRANCH"
echo ""
echo "picked:"
echo ""

pickedBranches="$(gitvb-ls)"
publishBranches=""
canPublish=false

if [ ! -z "$pickedBranches" ]; then
    while IFS= read -r line; do
        nAhead=$(git rev-list --count origin/$MAIN_BRANCH..$line)
        nUnpushed=$(git rev-list --count origin/$line..$line)
        nBehind=$(git rev-list --count $line..origin/$line)
        
        nRemote=$(git rev-list --count "origin/$line" ^"$line")

        nCommits=$(echo "$nAhead - $nRemote" | bc)

        # -$nBehind : 
        printf "$line [$nAhead commits total, "


        if [ "$nRemote" != "0" ]; then
            printf "needs publish to rebase upstream]"
            canPublish=true
            publishBranches="$publishBranches
$line"
        else
            printf "$nUnpushed commits not yet published, "
            if [ "$nUnpushed" != "0" ]; then
                canPublish=true
                publishBranches="$publishBranches
$line"
            fi
            printf "$nBehind from upstream]"
            if [ "$nBehind" != "0" ]; then
                canPublish=true
                publishBranches="$publishBranches
$line"
            fi
        fi
        # printf " nRemote=$nRemote nAhead=$nRemote"
        echo ""
    done <<< "$pickedBranches"
fi

# if [ "$canPublish" ]; then
#     echo "publish your changes with"
#     echo " $ gitvb-publish <picked branch>"
# fi


if [ ! -z "$publishBranches" ]; then
    echo
    echo "upstream your changes with"

    while IFS= read -r line; do
        if [ -z "$line" ]; then
            continue
        fi
        echo " $ gitvb-publish $line"
    done <<< "$publishBranches"
fi

# > verify all of the applied hashes are applied still
# > if not, warn
# git branch --contains 3add3e57a113b1aba30053298ff7f2c6ad3122fa

echo ""
echo "available:"
echo ""
# --no-merged HEAD 
branches="$(git branch -a --format='%(refname:short)' | grep -v "^$MAIN_BRANCH$")"
branchesLocal=$(echo "$branches" | grep -v '^origin/' || echo)
#  | sed 's/remotes\/origin\///g'

echo "$branchesLocal"
echo
